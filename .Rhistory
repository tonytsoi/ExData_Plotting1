library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "acs.csv")
acs <- read.csv("acs.csv")
head(acs)
sqldf("select pwgtp1 from acs")
sqldf("select pwgtp1 from acs")
library(sqldf)
Z <- unique(acs$AGEP)
Z
htmlUrl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(htmlUrl)
close(htmlUrl)
head(htmlCode)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST <- read.fwf(fileUrl, skip=4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(SST)
sum(SST[,4])
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
X
#Subset a column
X[,1]
X[, "var1"]
#Subset row and column
X[1:2, "var2"]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <=3 | X$var3 >15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X, var1)
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X, rnorm(5))
Y
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accesstype=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData,n=3)
tail(restData,n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9))
table(restData$zipCode, useNA = "ifany")
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict)
)
all(restData$zipCode>0)
colSums(is.na(restData))
all(colSums(is.na(restData))=0)
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212", "21213"))
restData[restData$zipCode %in% c("21212", "21213")]
restData[restData$zipCode %in% c("21212", "21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len=54)
xt = xtabs(breaks ~.,data=warbreaks)
xt
warpbreaks$replicate <- rep(1:9, len=54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData),units="Mb")
s1 <- seq(1,10,by=2); s1
s2 <- seq(1,10,length=3); s2
x <- c(1,3,8,25,100); seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode, g=4)
table(restData$zipGroups)
?Hmisc
install.packages(Hmisc)
install.packages("Hmisc")
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
yesno <- sample(c("yes","no"), size=10, replace=TRUE)
yesnofac = factor(yesno, levels=c("yes","no"))
relevel(yesnofac, ref="yes")
as.numeric(yesnofac)
yesno <- sample(c("yes","no"), size=10, replace=TRUE)
yesnofac = factor(yesno, levels=c("yes","no"))
relevel(yesnofac, ref="yes")
as.numeric(yesnofac, ref="yes")
yesno <- sample(c("yes","no"), size=10, replace=TRUE)
yesnofac = factor(yesno, levels=c("yes","no"))
relevel(yesnofac, ref="yes")
as.numeric(yesnofac, ref="yes")
library(Hmisc); library(plyr)
restData2 = mutate(restData, zeipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
restData2 = mutate(restData, zeipGroups=cut2(zipCode,g=4))
library(Hmisc); library(plyr)
restData2 = mutate(restData, zeipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
library(Hmisc); library(plyr)
restData2 = mutate(restData, zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
restData$zipGroups = cut2(restData$zipCode, g=4)
table(restData$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname","gear","cyl"),measure.vars=c("mpg", "hp"))
head(carMelt,n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl~variable)
cylData
cylData <- dcast(carMelt, cyl~variable, mean)
cylData
head(InspectSprays)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays,.(spray),summarize, sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),summarize, sum=ave(count,FUN=sum))
dim(SpraySums)
head(SpraySums)
spraySums <- ddply(InsectSprays,.(spray),summarize, sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
#Getting and Cleaning Data Assignment
#Download the file
File_Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
File_Path <- "./Dataset.zip"
download.file(File_Url, File_Path, method = "curl")
#Upzip the file
unzip(zipfile="./Dataset.zip")
#Getting the list of files in the unzip folder
pathdata = file.path("./UCI HAR Dataset")
files =list.files(pathdata, recursive=TRUE)
files
#Reading the data
xtrain = read.table(file.path(pathdata, "train", "X_train.txt"),header = FALSE)
ytrain = read.table(file.path(pathdata, "train", "y_train.txt"),header = FALSE)
subject_train = read.table(file.path(pathdata, "train", "subject_train.txt"),header = FALSE)
xtest = read.table(file.path(pathdata, "test", "X_test.txt"),header = FALSE)
ytest = read.table(file.path(pathdata, "test", "y_test.txt"),header = FALSE)
subject_test = read.table(file.path(pathdata, "test", "subject_test.txt"),header = FALSE)
features = read.table(file.path(pathdata, "features.txt"),header = FALSE)
activityLabels = read.table(file.path(pathdata, "activity_labels.txt"),header = FALSE)
#Labelling the variables
colnames(xtrain) = features[,2]
colnames(ytrain) = "activityId"
colnames(subject_train) = "subjectId"
colnames(xtest) = features[,2]
colnames(ytest) = "activityId"
colnames(subject_test) = "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#Merging the train and test data
train_data = cbind(ytrain, subject_train, xtrain)
test_data = cbind(ytest, subject_test, xtest)
traintest_data = rbind(train_data, test_data)
Varnames = colnames(traintest_data)
mean_std = (grepl("activityId" , Varnames) | grepl("subjectId" , Varnames) | grepl("mean.." , Varnames) | grepl("std.." , Varnames))
mean_std_data <- traintest_data[ , mean_std == TRUE]
meanstd_data_named = merge(mean_std_data, activityLabels, by='activityId', all.x=TRUE)
tidy_data <- aggregate(. ~subjectId + activityId, meanstd_data_named, mean)
tidy_data <- tidy_data[order(tidy_data$subjectId, tidy_data$activityId),]
write.table(tidy_data, "tidy_data.txt", row.name=FALSE)
View(tidy_data)
listname <- colnames(tidt_data)
listname <- colnames(tidy_data)
listname
#Getting and Cleaning Data Assignment
#Download the file
File_Url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
File_Path <- "./Dataset.zip"
download.file(File_Url, File_Path, method = "curl")
#Upzip the file
unzip(zipfile="./Dataset.zip")
#Getting the list of files in the unzip folder
pathdata = file.path("./UCI HAR Dataset")
files =list.files(pathdata, recursive=TRUE)
files
#Reading the data
xtrain = read.table(file.path(pathdata, "train", "X_train.txt"),header = FALSE)
ytrain = read.table(file.path(pathdata, "train", "y_train.txt"),header = FALSE)
subject_train = read.table(file.path(pathdata, "train", "subject_train.txt"),header = FALSE)
xtest = read.table(file.path(pathdata, "test", "X_test.txt"),header = FALSE)
ytest = read.table(file.path(pathdata, "test", "y_test.txt"),header = FALSE)
subject_test = read.table(file.path(pathdata, "test", "subject_test.txt"),header = FALSE)
features = read.table(file.path(pathdata, "features.txt"),header = FALSE)
activityLabels = read.table(file.path(pathdata, "activity_labels.txt"),header = FALSE)
#Labelling the variables
colnames(xtrain) = features[,2]
colnames(ytrain) = "activityId"
colnames(subject_train) = "subjectId"
colnames(xtest) = features[,2]
colnames(ytest) = "activityId"
colnames(subject_test) = "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#Merging the train and test data
train_data = cbind(ytrain, subject_train, xtrain)
test_data = cbind(ytest, subject_test, xtest)
traintest_data = rbind(train_data, test_data)
Varnames = colnames(traintest_data)
mean_std = (grepl("activityId" , Varnames) | grepl("subjectId" , Varnames) | grepl("mean.." , Varnames) | grepl("std.." , Varnames))
mean_std_data <- traintest_data[ , mean_std == TRUE]
meanstd_data_named = merge(mean_std_data, activityLabels, by='activityId', all.x=TRUE)
tidy_data <- aggregate(. ~subjectId + activityId, mean_std_data, mean)
tidy_data <- tidy_data[order(tidy_data$subjectId, tidy_data$activityId),]
tidy_data_named = merge(tidy_data, activityLabels, by='activityId', all.x=TRUE)
write.table(tidy_data_named, "tidy_data.txt", row.name=FALSE)
View(tidy_data_named)
View(tidy_data_named)
write.table(tidy_data_named, "tidy_data.txt", row.name=FALSE)
setwd("~/R/Exploratory Data Analysis")
read.delim("household_power_consumption.txt", header = TRUE, sep = ";")
data = read.delim("household_power_consumption.txt", header = TRUE, sep = ";")
View(data)
setwd("~/GitHub/ExData_Plotting1")
head(data)
hist(data$Global_active_power)
hist(data$Global_active_power, col="red")
hist(data$Global_active_power, col="red")
setwd("~/GitHub/ExData_Plotting1")
data = read.delim("household_power_consumption.txt", header = TRUE, sep = ";")
hist(data$Global_active_power, col="red")
hist(data$Global_active_power, col="red")
hist(data$Voltage, col="red")
typeof(data)
data = data.frame(data)
hist(data$Voltage, col="red")
typeof(data)
data = data.frame(data)
typeof(data)
class(data)
hist(data$Global_active_power, col="red")
type(data&Global_active_power)
type(data$Global_active_power)
typeof(data$Global_active_power)
data = read.delim("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = c("numeric"))
?read.delim
data = read.table("household_power_consumption.txt", header = TRUE, sep = ";")
hist(data$Global_active_power, col="red")
typeof(data$Global_active_power)
?as.numeric
data$Global_active_power = as.numeric(data$Global_active_power)
hist(data$Global_active_power, col="red")
data = as.numeric(data)
?hist
hist(data$Global_active_power, col="red", freq=200)
hist(data$Global_active_power, col="red", freq=2000)
hist(data$Global_active_power, col="red", density=2000)
hist(data$Global_active_power, col="red", density=200)
hist(data$Global_active_power, col="red")
hist(data$Global_active_power, col="red", main = "Global Active Power")
hist(data$Global_active_power, col="red", main = "Global Active Power", xlab = "Global active power (kilowatts)")
hist(data$Global_active_power, col="red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)"
breaks = 200)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 200)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 2000)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 20)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 10)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 20)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 15)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 15)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 12)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 10)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 20)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 15)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 15)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 14)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 14)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 15)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 12)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 5)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 3)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 2)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 6)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 8)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 10)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 12)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 14)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16,
xlim = 20)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16,
xlim = 100)
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16,
xlim = (100,100))
hist(data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16,
)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
sub_data = data[data$Date %in% c("1/2/2007","2/2/2007") ,]
sub_data$Global_active_power = as.numeric(sub_data$Global_active_power)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 16,
)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 20,
)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 10,
)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 14,
)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 12,
)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
breaks = 12)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
View(sub_data)
png("plot1.png", width=480, height=480)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
ylim = 1200 )
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
sub_data = subset(data,data$Date=="1/2/2007" | data$Date =="2/2/2007")
sub_data$Global_active_power = as.numeric(sub_data$Global_active_power)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
sub_data = data[data$Date %in% c("1/2/2007","2/2/2007") ,]
sub_data$Global_active_power = as.numeric(sub_data$Global_active_power)
png("plot1.png", width=480, height=480)
hist(sub_data$Global_active_power, col="red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
#plot2
plot(sub_data$Global_active_power, sub_data$Time)
#plot2
plot(sub_data$Time, sub_data$Global_active_power)
?plot
#plot2
plot(sub_data$Time, sub_data$Global_active_power, ylab = "Global Active Power")
#plot2
as.POSIXct(paste(sub_data$Date, sub_data$time), format="%Y-%m-%d %H:%M:%S")
#plot2
typeof(sub_data$Date)
#plot2
as.numeric(sub_data$Date)
#plot2
as.date(sub_data$Date)
#plot2
as.Date(sub_data$Date)
?as.Date
#plot2
as.Date(sub_data$Date, "%d/%m/%y")
#plot2
as.Date(sub_data$Date, "%d/%m/%yy")
#plot2
as.Date(sub_data$Date, "%d/%m/%Y")
typeof(sub_data$Time)
#plot2
sub_data$Date = as.Date(sub_data$Date, "%d/%m/%Y")
as.POSIXct(paste(sub_data$Date, sub_data$time), format="%Y-%m-%d %H:%M:%S")
datetime <- strptime(paste(sub_data$Date, sub_data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
plot(datetime, sub_data$Global_active_power, ylab = "Global Active Power")
as.POSIXct(paste(sub_data$Date, sub_data$time), format="%Y-%m-%d %H:%M:%S")
[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
sub_data[dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
sub_data[,dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
sub_data[,dateTime = as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
?strptime
strptime(sub_data$Time)
strptime(sub_data$Time, format = "")
datatime = paste(sub_data$Date, sub_data$Time)
strptime(sub_data$Time, format = "")
datetime = paste(sub_data$Date, sub_data$Time)
strptime(datetime, format = "")
datetime = strptime(datetime, format = "")
plot(datetime, sub_data$Global_active_power, ylab = "Global Active Power")
